
Oct 6, 2015
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What makes an HTTP API more or less RESTful?

Here are some online sources that might help me to answer that question:

https://en.wikipedia.org/wiki/Representational_state_transfer
http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
http://www.restapitutorial.com/lessons/whatisrest.html
http://www.restapitutorial.com/lessons/restquicktips.html
http://www.fullstackpython.com/api-creation.html
	http://www.narwhl.com/
		http://martinfowler.com/articles/richardsonMaturityModel.html
			"REST in Practice: Hypermedia and Systems Architecture"
			http://www.iana.org/assignments/link-relations/link-relations.xhtml
			http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
	https://medium.com/@zwacky/design-a-beautiful-rest-api-901c73489458
http://www.infoq.com/articles/web-api-rest
	
Lance Buttars recommends: http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api
	"For API security I recommend using client based certificates. 
		http://security.stackexchange.com/questions/3605/certificate-based-authentication-vs-username-and-password-authentication
	If that is not a possibility another option is to use SCRAM which avoids the issue of having the API store the client hash so using scram you store a shared proof.
		https://tools.ietf.org/html/rfc5802
			The difficulty with using scram is no one is familiar with it so you end up writing client based code so people can generate the correct client proof.
	I am also not a big fan of OAuth
		http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/"
	
See also:

http://www.fullstackpython.com/api-creation.html
https://jeffknupp.com/blog/2014/08/08/sandman-rebooted-create-a-rest-api-for-legacy-databases-without-writing-code/
	http://www.jeffknupp.com/blog/2014/07/15/your-databases-rest-api-sandman-one-year-later/ (notable comments on REST, HATEOAS, semantic gap, impedance mismatch)
		"It also fueled my interest in REST APIs, HATEOAS, and the semantic gap (all of which were the subject of other posts)."
		"This got me thinking more about web frameworks and the impedance mismatch between most web frameworks and RESTful API creation."
			See also his project called whizbang/omega: https://github.com/jeffknupp/omega
http://www.slashdb.com/
http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api
	
Initial, speculative answer:

My initial impression of more and lesser RESTful APIs is that, of the six REST constriants (client-server, stateless, cacheable, uniform interface, layered system, code-on-deman), the ones that are most often neglected (to one degree or another) are stateless, cacheable, and uniform interface. Some HTTP API's probably store state on the server between client requests, and so are not stateless. Some don't explicitly mark responses as cacheable or not. And some fail to provide the desired uniform interface by creating bad resource identifiers, failing to use links fully, etc. (See https://en.wikipedia.org/wiki/Representational_state_transfer#Uniform_interface.)


How can I adapt the default ASP.NET MVC app to display time log entries and allow the user to submit new ones?

	1- Add a new table to the embedded DB to store the entries. DONE
	2- Edit the home page to query for existing time log entries and allow for the addition of new ones.
		http://stackoverflow.com/questions/9815455/display-a-table-list-data-dynamically-in-mvc3-razor-from-a-jsonresult
	3- Make a Web API that will allow other apps to make time log entries.
		http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api
		

Oct 9, 2015
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

My HTML form's use of datetime-local input type is being converted by the browser (Chrome) to UTC.
	- Should I convert back to Eastern time?
		- How did AD's Net Acq job code achieve that?
	- the datetime-local type presents the user with a date picker widget, but the datetime type does not (in Chrome)
		The datetime type is removed in HTML5. The datetime-local is preferred in HTML5, but it's not yet supported in IE or Firefox: http://www.w3schools.com/html/html_form_input_types.asp
	
I've learned today that if you do

http://localhost:50249/api/Logs

in Chrome that Chrome will add request an XML response (because of the HTTP header "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8").
But, my python client gets a JSON response. That must be the default because my Python client does not specify an accept header.

See the "Adding a Model" section of http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api.

I've summed up my thoughts on REST in https://docs.google.com/presentation/d/1d1gKPsCupwUTx2z2vNad8lFDvsgPhYOmNmPUVJDm2jU/edit?usp=sharing.